{
  "name": "gulp-html-extract",
  "version": "0.1.0",
  "description": "Extract HTML text in your gulp pipeline.",
  "main": "html-extract.js",
  "scripts": {
    "lint-source": "eslint -c .eslintrc-source *.js lib",
    "lint-test": "eslint -c .eslintrc-test test",
    "lint": "npm run lint-source && npm run lint-test",
    "test-mocha": "mocha --recursive",
    "test": "npm run lint && npm run test-mocha"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/FormidableLabs/gulp-html-extract"
  },
  "keywords": [
    "gulp",
    "html"
  ],
  "author": {
    "name": "Ryan Roemer",
    "email": "ryan.roemer@formidablelabs.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/FormidableLabs/gulp-html-extract/issues"
  },
  "dependencies": {
    "cheerio": "^0.19.0",
    "gulp-util": "2.2.14",
    "through2": "0.4.1"
  },
  "devDependencies": {
    "chai": "1.9.1",
    "eslint": "^1.10.3",
    "eslint-config-defaults": "^7.1.1",
    "eslint-plugin-filenames": "^0.2.0",
    "mocha": "^2.3.4"
  },
  "readme": "# [gulp](https://github.com/gulpjs/gulp)-html-extract [![Build Status](https://secure.travis-ci.org/FormidableLabs/gulp-html-extract.png?branch=master)](http://travis-ci.org/FormidableLabs/gulp-html-extract)\n\n> Extract text from HTML content into pseudo-files for further Gulp processing.\n\n## Install\n\nInstall with [npm](https://npmjs.org/package/gulp-html-extract)\n\n```\nnpm install --save-dev gulp-html-extract\n```\n\n## Example\n\nA good use case is extracting JavaScript from `<script>` tags and then piping\nto [gulp-jshint](https://github.com/spenceralger/gulp-jshint). Here, we\nextract JavaScript from `<script>` tags and anything matching the\n`code.javascript` CSS selector:\n\n```js\nvar gulp = require(\"gulp\"),\n  jshint = require(\"gulp-jshint\"),\n  extract = require(\"gulp-html-extract\");\n\ngulp.task(\"jshint:html\", function () {\n  gulp\n    .src(\"site/**/*.html\")\n    .pipe(extract({\n      sel: \"script, code.javascript\"\n    }))\n    .pipe(jshint())\n    .pipe(jshint.reporter(\"default\"))\n    .pipe(jshint.reporter(\"fail\"));\n});\n```\n\n## Pseudo-Files\n\nThe plugin extracts each text snippet from an HTML source as an independent\nfaux [Vinyl](https://github.com/wearefractal/vinyl) file, with a path of:\n`HTML_PATH-ELEMENT_ID` or `HTML_PATH-TAG_NAME-INDEX` (if no `id` attribute).\n\nSome examples:\n\n```\npath/to/file1.html-CODE-1\npath/to/file2.html-my-identifier\n```\n\n## API\n\n### extract(opts)\n\n#### opts.sel\n\nCSS selector string to match on. Default: `script`.\n\n#### opts.strip\n\nStrip to indented level of first non-whitespace character. Removes whitespace-\nonly starting and ending lines around real text. Default: `false`\n",
  "readmeFilename": "README.md",
  "_id": "gulp-html-extract@0.1.0",
  "_from": "gulp-html-extract@^0.1.0"
}
