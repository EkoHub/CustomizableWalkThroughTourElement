{
  "name": "web-component-tester",
  "version": "4.2.2",
  "description": "web-component-tester makes testing your web components a breeze!",
  "keywords": [
    "browser",
    "grunt",
    "gruntplugin",
    "gulp",
    "polymer",
    "test",
    "testing",
    "web component",
    "web"
  ],
  "homepage": "https://github.com/Polymer/web-component-tester",
  "bugs": {
    "url": "https://github.com/Polymer/web-component-tester/issues"
  },
  "license": "BSD-3-Clause",
  "repository": {
    "type": "git",
    "url": "https://github.com/Polymer/web-component-tester.git"
  },
  "main": "runner.js",
  "bin": {
    "wct": "./bin/wct",
    "wct-st": "./bin/wct-st"
  },
  "files": [
    "bin/",
    "data/",
    "runner/",
    "scripts/",
    "tasks/",
    ".bowerrc",
    "bower.json",
    "browser.js",
    "browser.js.map",
    "package.json",
    "LICENSE",
    "README.md",
    "runner.js"
  ],
  "scripts": {
    "test": "gulp test",
    "build": "gulp build"
  },
  "dependencies": {
    "accessibility-developer-tools": "^2.10.0",
    "async": "^1.5.0",
    "body-parser": "^1.14.2",
    "chai": "^3.2.0",
    "chalk": "^1.1.1",
    "cleankill": "^1.0.0",
    "express": "^4.8.5",
    "findup-sync": "^0.2.1",
    "glob": "^5.0.15",
    "lodash": "^3.0.1",
    "mocha": "^2.2.4",
    "multer": "^1.1.0",
    "nomnom": "^1.8.1",
    "resolve": "^1.0.0",
    "send": "^0.11.1",
    "serve-waterfall": "^1.1.0",
    "server-destroy": "^1.0.1",
    "sinon": "^1.11.1",
    "sinon-chai": "^2.6.0",
    "socket.io": "^1.3.7",
    "stacky": "^1.3.1",
    "test-fixture": "PolymerElements/test-fixture",
    "wd": "^0.3.8",
    "update-notifier": "^0.6.0",
    "wct-local": "^2.0.0",
    "wct-sauce": "^1.8.2"
  },
  "optionalDependencies": {
    "update-notifier": "^0.6.0",
    "wct-local": "^2.0.0",
    "wct-sauce": "^1.8.2"
  },
  "devDependencies": {
    "grunt": "^0.4.5",
    "gulp": "^3.8.8",
    "gulp-jshint": "^2.0.0",
    "gulp-mocha": "^2.0.0",
    "jshint": "^2.8.0",
    "jshint-stylish": "^2.0.1",
    "lazypipe": "^1.0.1",
    "rollup": "^0.25.1",
    "run-sequence": "^1.0.1"
  },
  "engines": {
    "node": ">= 0.12"
  },
  "readme": "[![NPM version](http://img.shields.io/npm/v/web-component-tester.svg?style=flat-square)](https://npmjs.org/package/web-component-tester)\n[![Build Status](http://img.shields.io/travis/Polymer/web-component-tester.svg?style=flat-square)](https://travis-ci.org/Polymer/web-component-tester)\n[![Gitter](http://img.shields.io/badge/slack-join%20chat%20%E2%86%92-brightgreen.svg?style=flat-square)](https://polymer-slack.herokuapp.com/)\n\n`web-component-tester` makes testing your web components a breeze!\n\nYou get a browser-based testing environment, configured out of the box with:\n\n* [Mocha][mocha] as a test framework.\n* [Chai][chai] assertions.\n* [Async][async] to keep your sanity.\n* [Lodash][lodash] (3.0) to repeat fewer things.\n* [Sinon][sinon] and [sinon-chai][sinon-chai] to test just your things.\n* [test-fixture][test-fixture] for easy fixture testing with `<template>` tags.\n* [accessibility-developer-tools][a11ydevtools] through `a11ySuite` for simple, automated Accessibility testing.\n\nWCT will [run your tests](#running-your-tests) against whatever browsers you have locally installed, or remotely via Sauce Labs.\n\n\n# Getting Started\n\n## `.html` Suites\n\nYour test suites can be `.html` documents. For example,\n`test/awesomest-tests.html`:\n\n```html\n<!doctype html>\n<html>\n<head>\n  <meta charset=\"utf-8\">\n  <script src=\"../../webcomponentsjs/webcomponents-lite.js\"></script>\n  <script src=\"../../web-component-tester/browser.js\"></script>\n  <link rel=\"import\" href=\"../awesome-element.html\">\n</head>\n<body>\n  <awesome-element id=\"fixture\"></awesome-element>\n  <script>\n    suite('<awesome-element>', function() {\n      test('is awesomest', function() {\n        assert.isTrue(document.getElementById('fixture').awesomest);\n      });\n    });\n  </script>\n</body>\n</html>\n```\n\nNote that it is _critical_ that you include `web-component-tester/browser.js` in\nyour test suites. `browser.js` contains all of WCT's client logic (and loads\nbundled libraries like mocha and chai).\n\nIf you are using [WCT via the command line](#wct), it will automatically serve\nits local copy of `browser.js` on any URL that ends with\n`/web-component-tester/browser.js`.\n\n\n## `.js` Suites\n\nAlternatively, you can write tests in separate `.js` sources. For example,\n`test/awesome-tests.js`:\n\n```js\nsuite('AwesomeLib', function() {\n  test('is awesome', function() {\n    assert.isTrue(AwesomeLib.awesome);\n  });\n});\n```\n\n## Special Features\n\n### test-fixture\n\n`test-fixture` can be used to reset DOM state between test runs.\n```html\n<test-fixture id=\"simple\">\n  <template>\n    <div></div>\n  </template>\n</test-fixture>\n<script>\n  suite('classList', function() {\n    var div;\n    setup(function() {\n      div = fixture('simple');\n    });\n    test('foo', function() {\n      div.classList.add('foo');\n      assertSomethingOrOther(div);\n    });\n    test('bar', function() {\n      div.classList.add('bar');\n      assertNoFooClass(div);\n    });\n  });\n</script>\n```\n\n### a11ySuite\n\n`a11ySuite` provides an simple way to run accessibility-developer-tools' high quality accessibility audits when given a `test-fixture`.\nThe `a11ySuite` will show all the audit results via the standard Mocha test output.\n```html\n<test-fixture id=\"NoLabel\">\n  <template>\n    <paper-radio-button id=\"radio-1\"></paper-radio-button>\n  </template>\n</test-fixture>\n\n<script>\n  a11ySuite('NoLabel');\n</script>\n```\n![Accessibility Suite Test Run](a11ySuiteExample.png)\n\n## Running Your Tests\n\n### `wct`\n\nThe easiest way to run your tests is via the `wct` command line tool. Install\nit globally via:\n\n```sh\nnpm install -g web-component-tester\n```\n\nMake sure that you also have [Java][java] installed and available on your\n`PATH`.\n\nThe `wct` tool will run your tests in all the browsers you have installed. Just\nrun it:\n\n```sh\nwct\n```\n\nBy default, any tests under `test/` will be run. You can override this by\nspecifying particular files (or globs of files) via `wct path/to/files`.\n\n\n### Web Server\n\nIf you prefer not to use WCT's command line tool, you can also run WCT tests\ndirectly in a browser via a web server of your choosing.\n\nMake sure that WCT's `browser.js` is accessible by your web server, and have\nyour tests load `browser.js`.\n\nThe recommended way to fetch these is via Bower:\n\n    bower install Polymer/web-component-tester --save\n\n\n#### Nested Suites\n\nTo help support this case, you can also directly define an index that will load\nany desired tests:\n\n```html\n<!doctype html>\n<html>\n  <head>\n    <meta charset=\"utf-8\">\n    <script src=\"../bower_components/webcomponentsjs/webcomponents-lite.js\"></script>\n    <script src=\"../bower_components/web-component-tester/browser.js\"></script>\n    <script src=\"../awesome.js\"></script>\n  </head>\n  <body>\n    <script>\n      WCT.loadSuites([\n        'awesome-tests.js',\n        'awesomest-tests.html',\n      ]);\n    </script>\n  </body>\n</html>\n```\n\n_When you use `wct` on the command line, it is generating an index like this for\nyou based on the suites you ask it to load._\n\n\n# Configuration\n\nThe `wct` command line tool will pick up custom configuration from a\n`wct.conf.json` file located in the root of your project. It should export the\ncustom configuration:\n\n```js\n{\n  \"verbose\": true,\n  \"plugins\": {\n    \"local\": {\n      \"browsers\": [\"chrome\", \"firefox\"]\n    }\n  }\n}\n```\n\nSee [`runner/config.js`](runner/config.js) for the canonical reference of\nconfiguration properties.\n\nYou can also specify global defaults (such as `sauce.username`, etc) via a\nconfig file located at `~/wct.conf.json`.\n\n## Plugins\n\nNote that by specifying a plugin's configuration, you are letting WCT know that\nit should load that plugin. If you wish to provide default configuration for a\nplugin, but not enable it, you can have it default to disabled:\n\n```js\n{\n  \"plugins\": {\n    \"sauce\": {\n      \"disabled\": true,\n      \"browsers\": [{\n          \"browserName\": \"microsoftedge\",\n          \"platform\": \"Windows 10\",\n          \"version\": \"\"\n        }, {\n          \"browserName\": \"internet explorer\",\n          \"platform\": \"Windows 8.1\",\n          \"version\": \"11\"\n        },\n        {\n          \"browserName\": \"safari\",\n          \"platform\": \"OS X 10.11\",\n          \"version\": \"9\"\n        }\n      ]\n    }\n  }\n}\n```\n\nFor more information on Sauce configuration, [see their Wiki](https://wiki.saucelabs.com/display/DOCS/Test+Configuration+Options#TestConfigurationOptions-RequiredSeleniumTestConfigurationSettings)\n\nRequesting that plugin via `--plugin` on the command line (or overriding the\nplugin's configuration to `disabled: false`) will cause the plugin to kick in.\n\n\n# Nitty Gritty\n\n## Polymer\n\nBy default, WCT will defer tests until `WebComponentsReady` has fired. This\nsaves you from having to wait for elements to upgrade and all that yourself.\n\nIf you need to test something that occurs before that event, the [`testImmediate` helper](https://github.com/Polymer/web-component-tester/blob/master/browser/environment/helpers.js#L29-41) can be used. Or, if you just want tests to run as soon as possible, you can disable the delay by setting `WCT.waitForFrameworks = false` (though, they are still async due to Mocha).\n\n\n## Mocha\n\nWCT supports Mocha's [TDD][mocha-tdd] (`suite`/`test`/etc) and [BDD][mocha-bdd]\n(`describe`/`it`/etc) interfaces, and will call `mocha.setup`/`mocha.run` for\nyou. Just write your tests, and you're set.\n\n\n## Chai\n\nSimilarly, Chai's [`expect`][chai-bdd] and [`assert`][chai-tdd] interfaces are\nexposed for your convenience.\n\n\n## Custom Environments\n\nIf you would rather not load WCT's shared environment, or want to have WCT\nload additional libraries, you can override the list of scripts loaded. There\nare two ways of doing this:\n\nInside your test code (before `browser.js` is loaded):\n```html\n<script>\n  WCT = {\n    environmentScripts: [\n      // Mocha and Stacky are required dependencies\n      'stacky/lib/parsing.js',\n      'stacky/lib/formatting.js',\n      'stacky/lib/normalization.js',\n      'mocha/mocha.js',\n      // Include anything else that you like!\n    ],\n  };\n```\n\nAlternatively, you can specify these options via the `clientOptions`\nkey in `wct.conf.json`.\n\nA reference of the default configuration can be found at\n[browser/config.js](browser/config.js).\n\n\n## Gulp\n\nWe also provide Gulp tasks for your use. `gulpfile.js`:\n\n```js\nvar gulp = require('gulp');\nrequire('web-component-tester').gulp.init(gulp, [dependencies]);\n```\n\nExposes `gulp test:local` and `gulp test:remote`, which depend on the optional\n`dependencies`.\n\n\n## Grunt\n\nOr, Grunt tasks, if you prefer. `gruntfile.js`:\n\n```js\ngrunt.initConfig({\n  'wct-test': {\n    local: {\n      options: {remote: false},\n    },\n    remote: {\n      options: {remote: true},\n    },\n    chrome: {\n      options: {browsers: ['chrome']},\n    },\n  },\n});\n\ngrunt.loadNpmTasks('web-component-tester');\n```\n\nGives you two grunt tasks: `wct-test:local` and `wct-test:remote`. The\n`options` you can use are specified in [`runner/config.js`](runner/config.js).\n\n\n# Plugin Authoring\n\nA plugin is a node module that can hook into various steps of WCT's flow. It\nlooks like this:\n\n`package.json`:\n```js\n{\n  // ...\n  \"wct-plugin\": {\n    \"cli-options\": {\n      // ... option configuration (nomnom)\n    }\n  }\n}\n```\n\n`plugin.js` (the plugin's main module)\n```js\nmodule.exports = function(context, pluginOptions, plugin) {\n  // ...\n};\n```\n\nThe plugin can subscribe to hooks via the [`Context`](runner/context.js)\nobject. Any options (via wct.conf.json or command line) are merged into\n`pluginOptions`. And, `plugin` is the instance of [`Plugin`](runner/plugin.js)\nfor the plugin.\n\n[wct-local](https://github.com/Polymer/wct-local) and\n[wct-sauce](https://github.com/Polymer/wct-sauce) are example plugins you can\nfollow.\n\n\n<!-- References -->\n[async]:      https://github.com/caolan/async       \"Async.js\"\n[chai-bdd]:   http://chaijs.com/api/bdd/            \"Chai's BDD Interface\"\n[chai-tdd]:   http://chaijs.com/api/assert/         \"Chai's TDD Interface\"\n[chai]:       http://chaijs.com/                    \"Chai Assertion Library\"\n[java]:       https://java.com/download             \"Java\"\n[mocha-bdd]:  http://mochajs.org/#bdd-interface     \"Mocha's BDD Interface\"\n[mocha-tdd]:  http://mochajs.org/#tdd-interface     \"Mocha's TDD Interface\"\n[mocha]:      http://mochajs.org/                   \"Mocha Test Framework\"\n[sauce]:      http://saucelabs.com                  \"Sauce Labs\"\n[opensauce]:  https://saucelabs.com/opensauce       \"Open Sauce Testing\"\n[lodash]:     https://lodash.com/                   \"Lo-Dash\"\n[sinon]:      http://sinonjs.org/                   \"Sinon.JS\"\n[sinon-chai]: https://github.com/domenic/sinon-chai \"Chai assertions for Sinon\"\n[test-fixture]: https://github.com/PolymerElements/test-fixture \"Easy DOM fixture testing\"\n[a11ydevtools]: https://github.com/GoogleChrome/accessibility-developer-tools \"A collection of audit rules checking for common accessibility problems, and an API for running these rules in an HTML page.\"\n",
  "readmeFilename": "README.md",
  "_id": "web-component-tester@4.2.2",
  "_from": "web-component-tester@^4.0.0"
}
