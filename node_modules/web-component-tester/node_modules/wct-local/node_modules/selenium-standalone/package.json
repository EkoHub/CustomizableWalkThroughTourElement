{
  "name": "selenium-standalone",
  "version": "5.1.0",
  "description": "installs a `selenium-standalone` command line to install and start a standalone selenium server",
  "main": "index.js",
  "scripts": {
    "test": "./bin/selenium-standalone install && mocha"
  },
  "bin": {
    "selenium-standalone": "./bin/selenium-standalone",
    "start-selenium": "./bin/start-selenium"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:vvo/selenium-standalone.git"
  },
  "bugs": {
    "url": "https://github.com/vvo/selenium-standalone/issues"
  },
  "homepage": "https://github.com/vvo/selenium-standalone",
  "author": {
    "name": "Vincent Voyer",
    "email": "vincent@zeroload.net"
  },
  "license": "MIT",
  "dependencies": {
    "urijs": "1.16.1",
    "async": "1.2.1",
    "commander": "2.6.0",
    "lodash": "3.9.3",
    "minimist": "1.1.0",
    "mkdirp": "0.5.0",
    "progress": "1.1.8",
    "request": "2.51.0",
    "unzip": "0.1.11",
    "which": "1.1.1"
  },
  "devDependencies": {
    "mocha": "2.1.0"
  },
  "contributors": [
    {
      "name": "Vincent Voyer",
      "email": "vincent@zeroload.net"
    },
    {
      "name": "Josh Chisholm",
      "email": "joshuachisholm@gmail.com"
    }
  ],
  "readme": "# selenium-standalone [![Build Status](https://img.shields.io/travis/vvo/selenium-standalone/master.svg?style=flat-square)](https://travis-ci.org/vvo/selenium-standalone) [![Dependency Status](https://img.shields.io/david/vvo/selenium-standalone.svg?style=flat-square)](https://david-dm.org/vvo/selenium-standalone) [![devDependency Status](https://img.shields.io/david/dev/vvo/selenium-standalone.svg?style=flat-square)](https://david-dm.org/vvo/selenium-standalone#info=devDependencies)\n\nCommand line or programmatic install and launch of [selenium](http://www.seleniumhq.org/download/) standalone\nserver, [chrome driver](https://code.google.com/p/selenium/wiki/ChromeDriver), [internet explorer driver](https://code.google.com/p/selenium/wiki/InternetExplorerDriver), [firefox driver](https://code.google.com/p/selenium/wiki/FirefoxDriver) and phantomjs\n\nIt will install a `selenium-standalone` command line that will be able to `install` selenium server and `start` firefox, chrome, internet explorer or phantomjs for your tests.\n\n```shell\nnpm install selenium-standalone@latest -g\nselenium-standalone install\nselenium-standalone start\n```\n\n![screencast](screencast.gif)\n\n## Command line API\n\n```shell\n# simple, use defaults and latest selenium\nselenium-standalone install\nselenium-standalone start\n\n# install defaults, but silently\nselenium-standalone install --silent\n\n# specify selenium args, everything after -- is for selenium\nselenium-standalone start -- -debug\n\n# choose selenium version\nselenium-standalone install --version=2.45.0 --baseURL=https://selenium-release.storage.googleapis.com\n\n# choose chrome driver version\nselenium-standalone install --drivers.chrome.version=2.15 --drivers.chrome.baseURL=https://chromedriver.storage.googleapis.com\n\n# choose ie driver architecture\nselenium-standalone start --drivers.ie.arch=ia32 --drivers.ie.baseURL=https://selenium-release.storage.googleapis.com\n\n# specify hub and nodes to setup your own selenium grid\nselenium-standalone start -- -role hub\nselenium-standalone start -- -role node -hub http://localhost:4444/grid/register\nselenium-standalone start -- -role node -hub http://localhost:4444/grid/register -port 5556\n\n\n```\n\n## Programmatic API\n\n### Example\n\n```js\nvar selenium = require('selenium-standalone');\n\nselenium.install({\n  // check for more recent versions of selenium here:\n  // https://selenium-release.storage.googleapis.com/index.html\n  version: '2.45.0',\n  baseURL: 'https://selenium-release.storage.googleapis.com',\n  drivers: {\n    chrome: {\n      // check for more recent versions of chrome driver here:\n      // https://chromedriver.storage.googleapis.com/index.html\n      version: '2.15',\n      arch: process.arch,\n      baseURL: 'https://chromedriver.storage.googleapis.com'\n    },\n    ie: {\n      // check for more recent versions of internet explorer driver here:\n      // https://selenium-release.storage.googleapis.com/index.html\n      version: '2.45.0',\n      arch: process.arch,\n      baseURL: 'https://selenium-release.storage.googleapis.com'\n    }\n  },\n  logger: function(message) {\n\n  },\n  progressCb: function(totalLength, progressLength, chunkLength) {\n\n  }\n}, cb);\n```\n\n### selenium.install([opts,] cb)\n\n`opts.version` [selenium version](https://selenium-release.storage.googleapis.com/index.html) to install.\n\n`opts.drivers` map of drivers to download and install along with selenium standalone server.\n\nHere are the current defaults:\n\n```js\n{\n  chrome: {\n    version: '2.15',\n    arch: process.arch,\n    baseURL: 'https://chromedriver.storage.googleapis.com'\n  },\n  ie: {\n    version: '2.45.0',\n    arch: process.arch,\n    baseURL: 'https://selenium-release.storage.googleapis.com'\n  }\n}\n```\n\n`arch` is either `ia32` or `x64`, it's here because you might want to switch to a particular\narch [sometimes](https://code.google.com/p/selenium/issues/detail?id=5116#c9).\n\n`baseURL` is used to find the server having the selenium or drivers files.\n\n`opts.basePath` sets the base directory used to store the selenium standalone `.jar` and drivers. Defaults to current working directory + .selenium/\n\n`opts.progressCb(totalLength, progressLength, chunkLength)` will be called if provided with raw bytes length numbers about the current download process. It is used by the command line to show a progress bar.\n\n`opts.logger` will be called if provided with some debugging information about the installation process.\n\n`cb(err)` called when install finished or errored.\n\n### selenium.start([opts,] cb)\n\n`opts.drivers` map of drivers to run along with selenium standalone server, same\nas `selenium.install`.\n\n`opts.basePath` sets the base directory used to load the selenium standalone `.jar` and drivers, same as `selenium.install`.\n\nBy default all drivers are loaded, you only control and change the versions or archs.\n\n`opts.spawnOptions` [spawn options](https://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options) for the selenium server. Defaults to `undefined`\n\n`opts.seleniumArgs` array of arguments for the selenium server, passed directly to [child_process.spawn](https://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options). Defaults to `[]`.\n\n`opts.spawnCb` will be called if provided as soon as the selenium child process was spawned. It may be interesting if you want to do some more debug.\n\n`opts.javaPath` set the javaPath manually, otherwise we use `[which](https://github.com/isaacs/node-which).sync('java')`\n\n`cb(err, child)` called when the server is running and listening, child is the [ChildProcess](https://nodejs.org/api/child_process.html#child_process_class_childprocess) instance created.\n\nSo you can `child.kill()` when you are done.\n\n#### `Error: Another Selenium process is already running`\n\nIf you're getting this error, it means that you didn't shut down the server successfully the last time you started it, so it's still running in the background. You can kill it by running:\n\n```shell\npkill -f selenium-standalone\n```\n\n## Available browsers\n\nBy default, google chrome, firefox and phantomjs are available\nwhen installed on the host system.\n\n## Tips\n\n### Start Selenium whenever your (ubuntu) machine starts!\n\nAfter installing selenium-standalone globally, execute the following commands to run selenium-standalone when your machine starts!\n\n```shell\nln -s /usr/local/bin/selenium-standalone /etc/init.d/\nupdate-rc.d selenium-standalone defaults\n```\nFor more information: https://stackoverflow.com/questions/3666794/selenium-server-on-startup/30392437#30392437\n\n\n### Running headlessly\n\nOn linux,\n\nTo run headlessly, you can use [xvfb](https://en.wikipedia.org/wiki/Xvfb):\n\n```shell\nxvfb-run --server-args=\"-screen 0, 1366x768x24\" selenium-standalone start\n```\n\n### Logging\n\nBy default, Selenium sends [logging messages to stderr](https://code.google.com/p/selenium/issues/detail?id=7957).\n\nThe selenium-standalone cli tool (`selenium-standalone start`) will output the logging messages to your `process.stderr`. So you do see them in the console.\n\nIf you are using the programmatic API, you can retrieve the `stderr` messages by doing this:\n\n```js\nvar selenium = require('selenium-standalone');\nselenium.start(function(err, child) {\n  child.stderr.on('data', function(data){\n    console.log(data.toString());\n  });\n});\n```\n\nYou can also forward the `stderr` to your `process.stderr` like the cli does:\n\n```js\nvar selenium = require('selenium-standalone');\nselenium.start({\n  spawnOptions: {\n      stdio: 'inherit'\n  }\n}, function(err, child) {\n  // child.stderr now sent to your `process.stderr`\n});\n```\n\n### Examples of combining with other tools\n\n- [Gulp + WebdriverIO + Mocha](https://twin.github.io/selenium-testing-workflow-with-webdriverio/)\n",
  "readmeFilename": "README.md",
  "_id": "selenium-standalone@5.1.0",
  "_from": "selenium-standalone@^5.0.0"
}
